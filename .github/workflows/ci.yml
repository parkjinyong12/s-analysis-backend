name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .
        mypy .
    
    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        FLASK_ENV: testing
      run: |
        python -m pytest tests/ -m "unit" -v --cov=. --cov-report=xml --cov-report=term-missing

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        FLASK_ENV: testing
      run: |
        python -m pytest tests/ -m "integration" -v --cov=. --cov-report=xml --cov-report=term-missing

    - name: Run API tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        FLASK_ENV: testing
      run: |
        python -m pytest tests/ -m "api" -v --cov=. --cov-report=xml --cov-report=term-missing

    - name: Run database tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        FLASK_ENV: testing
      run: |
        python -m pytest tests/ -m "database" -v --cov=. --cov-report=xml --cov-report=term-missing

    - name: Generate test report
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        FLASK_ENV: testing
      run: |
        mkdir -p reports
        python -m pytest tests/ --html=reports/test_report.html --self-contained-html --cov=. --cov-report=html:reports/coverage

    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          reports/
          .coverage
          coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_REGISTRY }}/stock-analysis:latest
          ${{ secrets.DOCKER_REGISTRY }}/stock-analysis:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # 여기에 실제 배포 스크립트 추가 